"use client";
import { Amplify } from 'aws-amplify';

/**
 * Esta fun√ß√£o imprime todas as informa√ß√µes de configura√ß√£o de autentica√ß√£o
 * que s√£o relevantes para depurar problemas de login com Google.
 */
export function printAuthDiagnostic() {
  try {
    console.group('üîç DIAGN√ìSTICO DE AUTENTICA√á√ÉO');
    let configInfo = 'Configura√ß√£o n√£o dispon√≠vel via API p√∫blica do Amplify.';
    if (typeof window !== 'undefined' && window.__amplifyConfigured) {
      configInfo = 'Amplify j√° configurado.';
    }
    console.log('üîç STATUS AMPLIFY:', configInfo);
    // N√£o √© poss√≠vel acessar detalhes internos do Auth/Cognito/OAuth
    console.log('‚ÑπÔ∏è Para detalhes, verifique o arquivo de configura√ß√£o usado em configureAmplify().');
    console.groupEnd();
    return true;
  } catch (error) {
    console.error('‚ùå Erro ao gerar diagn√≥stico de autentica√ß√£o:', error);
    return false;
  }
}

/**
 * Verifica se a autentica√ß√£o pode ser bem-sucedida com base na configura√ß√£o atual
 * @returns Um objeto com o resultado da verifica√ß√£o e poss√≠veis problemas
 */
interface ValidationResult {
  isValid: boolean;
  canProceed: boolean;
  issues: string[];
  warnings: string[];
}

export function validateAuthConfiguration() {
  try {
    const isConfigured = typeof window !== 'undefined' && window.__amplifyConfigured;
    return {
      isValid: isConfigured,
      canProceed: isConfigured,
      issues: isConfigured ? [] : ['Amplify n√£o est√° configurado.'],
      warnings: []
    };
  } catch (error) {
    return {
      isValid: false,
      canProceed: false,
      issues: [`Erro ao validar configura√ß√£o: ${error instanceof Error ? error.message : String(error)}`],
      warnings: []
    };
  }
}

/**
 * Retorna um objeto com todos os dados de diagn√≥stico
 * √∫til para exibir em um componente de UI
 */
export function getAuthDiagnosticData() {
  try {
    const isConfigured = typeof window !== 'undefined' && window.__amplifyConfigured;
    const validationResult = validateAuthConfiguration();
    return {
      amplifyConfigured: isConfigured,
      validation: validationResult,
      message: isConfigured ? 'Amplify configurado.' : 'Amplify n√£o configurado.'
    };
  } catch (error) {
    console.error('Erro ao obter dados de diagn√≥stico:', error);
    return {
      error: 'Falha ao obter dados de configura√ß√£o',
      errorDetails: error instanceof Error ? error.message : String(error)
    };
  }
}

export default { printAuthDiagnostic, getAuthDiagnosticData, validateAuthConfiguration };
