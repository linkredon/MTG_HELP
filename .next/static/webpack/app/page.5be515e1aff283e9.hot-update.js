"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./contexts/AppContext.tsx":
/*!*********************************!*\
  !*** ./contexts/AppContext.tsx ***!
  \*********************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AppProvider: function() { return /* binding */ AppProvider; },\n/* harmony export */   useAppContext: function() { return /* binding */ useAppContext; }\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _utils_storageUtils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/utils/storageUtils */ \"(app-pages-browser)/./utils/storageUtils.ts\");\n/* harmony import */ var _utils_apiService__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @/utils/apiService */ \"(app-pages-browser)/./utils/apiService.ts\");\n/* harmony import */ var next_auth_react__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! next-auth/react */ \"(app-pages-browser)/./node_modules/next-auth/react/index.js\");\n/* harmony import */ var next_auth_react__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(next_auth_react__WEBPACK_IMPORTED_MODULE_4__);\n/* __next_internal_client_entry_do_not_use__ useAppContext,AppProvider auto */ \nvar _s = $RefreshSig$(), _s1 = $RefreshSig$();\n\n\n\n\nconst AppContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.createContext)(null);\nconst useAppContext = ()=>{\n    _s();\n    const context = (0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(AppContext);\n    if (!context) {\n        throw new Error(\"useAppContext deve ser usado dentro de um AppProvider\");\n    }\n    return context;\n};\n_s(useAppContext, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nconst AppProvider = (param)=>{\n    let { children } = param;\n    _s1();\n    const { data: session } = (0,next_auth_react__WEBPACK_IMPORTED_MODULE_4__.useSession)();\n    const [collections, setCollections] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)([]);\n    const [currentCollectionId, setCurrentCollectionId] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const [decks, setDecks] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)([]);\n    const [favorites, setFavorites] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)([]);\n    const [loading, setLoading] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(true);\n    const currentCollection = react__WEBPACK_IMPORTED_MODULE_1___default().useMemo(()=>{\n        return collections.find((c)=>c.id === currentCollectionId);\n    }, [\n        collections,\n        currentCollectionId\n    ]);\n    // Carregar dados da API quando o usuário estiver autenticado\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        const loadData = async ()=>{\n            if (session) {\n                setLoading(true);\n                try {\n                    // Carregar coleções\n                    const collectionsResponse = await _utils_apiService__WEBPACK_IMPORTED_MODULE_3__.collectionService.getAll();\n                    if (collectionsResponse.success && collectionsResponse.data) {\n                        setCollections(collectionsResponse.data);\n                        if (collectionsResponse.data.length > 0 && !currentCollectionId) {\n                            setCurrentCollectionId(collectionsResponse.data[0].id);\n                        }\n                    }\n                    // Carregar decks\n                    const decksResponse = await _utils_apiService__WEBPACK_IMPORTED_MODULE_3__.deckService.getAll();\n                    if (decksResponse.success && decksResponse.data) {\n                        setDecks(decksResponse.data);\n                    }\n                    // Carregar favoritos\n                    const favoritesResponse = await _utils_apiService__WEBPACK_IMPORTED_MODULE_3__.favoriteService.getAll();\n                    if (favoritesResponse.success && favoritesResponse.data) {\n                        setFavorites(favoritesResponse.data.map((fav)=>fav.card));\n                    }\n                } catch (error) {\n                    console.error(\"Erro ao carregar dados:\", error);\n                } finally{\n                    setLoading(false);\n                }\n            } else {\n                // Usuário não autenticado, usar localStorage como fallback\n                const savedCollections = localStorage.getItem(\"mtg-collections\");\n                if (savedCollections) {\n                    try {\n                        const parsedCollections = JSON.parse(savedCollections);\n                        setCollections(parsedCollections);\n                        if (parsedCollections.length > 0 && !currentCollectionId) {\n                            setCurrentCollectionId(parsedCollections[0].id);\n                        }\n                    } catch (error) {\n                        console.error(\"Erro ao carregar cole\\xe7\\xf5es salvas:\", error);\n                    }\n                } else {\n                    // Criar uma coleção padrão se não houver nenhuma\n                    const defaultCollection = {\n                        id: \"1\",\n                        name: \"Minha Cole\\xe7\\xe3o\",\n                        description: \"Cole\\xe7\\xe3o principal de cartas Magic\",\n                        cards: [],\n                        createdAt: new Date().toISOString(),\n                        updatedAt: new Date().toISOString(),\n                        isPublic: false\n                    };\n                    setCollections([\n                        defaultCollection\n                    ]);\n                    setCurrentCollectionId(defaultCollection.id);\n                }\n                const savedDecks = localStorage.getItem(\"mtg-decks\");\n                if (savedDecks) {\n                    try {\n                        const parsedDecks = JSON.parse(savedDecks);\n                        setDecks(parsedDecks);\n                    } catch (error) {\n                        console.error(\"Erro ao carregar decks salvos:\", error);\n                    }\n                }\n                const savedFavorites = localStorage.getItem(\"mtg-favorites\");\n                if (savedFavorites) {\n                    try {\n                        const parsedFavorites = JSON.parse(savedFavorites);\n                        setFavorites(parsedFavorites);\n                    } catch (error) {\n                        console.error(\"Erro ao carregar favoritos salvos:\", error);\n                    }\n                }\n                setLoading(false);\n            }\n        };\n        loadData();\n    }, [\n        session\n    ]);\n    // Salvar dados no localStorage quando não estiver autenticado\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        if (!session) {\n            (0,_utils_storageUtils__WEBPACK_IMPORTED_MODULE_2__.safeLocalStorageSave)(\"mtg-collections\", collections);\n        }\n    }, [\n        collections,\n        session\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        if (!session) {\n            (0,_utils_storageUtils__WEBPACK_IMPORTED_MODULE_2__.safeLocalStorageSave)(\"mtg-decks\", decks);\n        }\n    }, [\n        decks,\n        session\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        if (!session) {\n            (0,_utils_storageUtils__WEBPACK_IMPORTED_MODULE_2__.safeLocalStorageSave)(\"mtg-favorites\", favorites);\n        }\n    }, [\n        favorites,\n        session\n    ]);\n    // Funções de gerenciamento de coleção\n    const createCollection = async function(name) {\n        let description = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : \"\";\n        if (session) {\n            try {\n                const response = await _utils_apiService__WEBPACK_IMPORTED_MODULE_3__.collectionService.create({\n                    name,\n                    description\n                });\n                if (response.success && response.data) {\n                    setCollections((prev)=>[\n                            ...prev,\n                            response.data\n                        ]);\n                    setCurrentCollectionId(response.data.id);\n                    return response.data.id;\n                }\n                throw new Error(\"Erro ao criar cole\\xe7\\xe3o\");\n            } catch (error) {\n                console.error(\"Erro ao criar cole\\xe7\\xe3o:\", error);\n                throw error;\n            }\n        } else {\n            // Fallback para localStorage\n            const newCollection = {\n                id: Date.now().toString(),\n                name,\n                description,\n                cards: [],\n                createdAt: new Date().toISOString(),\n                updatedAt: new Date().toISOString(),\n                isPublic: false\n            };\n            setCollections((prev)=>[\n                    ...prev,\n                    newCollection\n                ]);\n            setCurrentCollectionId(newCollection.id);\n            return newCollection.id;\n        }\n    };\n    const updateCollection = async (id, updates)=>{\n        if (session) {\n            try {\n                const response = await _utils_apiService__WEBPACK_IMPORTED_MODULE_3__.collectionService.update(id, updates);\n                if (response.success) {\n                    setCollections((prev)=>prev.map((c)=>c.id === id ? {\n                                ...c,\n                                ...updates\n                            } : c));\n                }\n            } catch (error) {\n                console.error(\"Erro ao atualizar cole\\xe7\\xe3o:\", error);\n                throw error;\n            }\n        } else {\n            // Fallback para localStorage\n            setCollections((prev)=>prev.map((c)=>c.id === id ? {\n                        ...c,\n                        ...updates,\n                        updatedAt: new Date().toISOString()\n                    } : c));\n        }\n    };\n    const deleteCollection = async (id)=>{\n        if (session) {\n            try {\n                const response = await _utils_apiService__WEBPACK_IMPORTED_MODULE_3__.collectionService.delete(id);\n                if (response.success) {\n                    setCollections((prev)=>{\n                        const newCollections = prev.filter((c)=>c.id !== id);\n                        if (currentCollectionId === id) {\n                            setCurrentCollectionId(newCollections.length > 0 ? newCollections[0].id : null);\n                        }\n                        return newCollections;\n                    });\n                }\n            } catch (error) {\n                console.error(\"Erro ao excluir cole\\xe7\\xe3o:\", error);\n                throw error;\n            }\n        } else {\n            // Fallback para localStorage\n            setCollections((prev)=>{\n                const newCollections = prev.filter((c)=>c.id !== id);\n                if (currentCollectionId === id) {\n                    setCurrentCollectionId(newCollections.length > 0 ? newCollections[0].id : null);\n                }\n                return newCollections;\n            });\n        }\n    };\n    const duplicateCollection = async (id)=>{\n        const collectionToDuplicate = collections.find((c)=>c.id === id);\n        if (!collectionToDuplicate) return;\n        if (session) {\n            try {\n                const newCollection = {\n                    name: \"\".concat(collectionToDuplicate.name, \" (C\\xf3pia)\"),\n                    description: collectionToDuplicate.description,\n                    isPublic: false\n                };\n                const response = await _utils_apiService__WEBPACK_IMPORTED_MODULE_3__.collectionService.create(newCollection);\n                if (response.success && response.data) {\n                    // Adicionar cartas à nova coleção\n                    for (const cardItem of collectionToDuplicate.cards){\n                        await _utils_apiService__WEBPACK_IMPORTED_MODULE_3__.collectionService.addCard(response.data.id, {\n                            card: cardItem.card,\n                            quantity: cardItem.quantity,\n                            condition: cardItem.condition,\n                            foil: cardItem.foil,\n                            language: cardItem.language\n                        });\n                    }\n                    // Atualizar estado local\n                    const updatedResponse = await _utils_apiService__WEBPACK_IMPORTED_MODULE_3__.collectionService.getById(response.data.id);\n                    if (updatedResponse.success) {\n                        setCollections((prev)=>[\n                                ...prev,\n                                updatedResponse.data\n                            ]);\n                    }\n                }\n            } catch (error) {\n                console.error(\"Erro ao duplicar cole\\xe7\\xe3o:\", error);\n                throw error;\n            }\n        } else {\n            // Fallback para localStorage\n            const newCollection = {\n                ...collectionToDuplicate,\n                id: Date.now().toString(),\n                name: \"\".concat(collectionToDuplicate.name, \" (C\\xf3pia)\")\n            };\n            setCollections((prev)=>[\n                    ...prev,\n                    newCollection\n                ]);\n        }\n    };\n    // Função para adicionar carta à coleção\n    const adicionarCarta = async function(card) {\n        let quantidade = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 1;\n        if (!currentCollectionId) return;\n        if (session) {\n            try {\n                await _utils_apiService__WEBPACK_IMPORTED_MODULE_3__.collectionService.addCard(currentCollectionId, {\n                    card,\n                    quantity: quantidade,\n                    condition: \"Near Mint\",\n                    foil: false,\n                    language: \"English\"\n                });\n                // Atualizar estado local\n                const response = await _utils_apiService__WEBPACK_IMPORTED_MODULE_3__.collectionService.getById(currentCollectionId);\n                if (response.success) {\n                    setCollections((prev)=>prev.map((c)=>c.id === currentCollectionId ? response.data : c));\n                }\n            } catch (error) {\n                console.error(\"Erro ao adicionar carta:\", error);\n                throw error;\n            }\n        } else {\n            // Fallback para localStorage\n            setCollections((prev)=>prev.map((c)=>{\n                    if (c.id !== currentCollectionId) return c;\n                    const existingCard = c.cards.find((cc)=>cc.card.id === card.id);\n                    let newCards;\n                    if (existingCard) {\n                        newCards = c.cards.map((cc)=>cc.card.id === card.id ? {\n                                ...cc,\n                                quantity: cc.quantity + quantidade\n                            } : cc);\n                    } else {\n                        newCards = [\n                            ...c.cards,\n                            {\n                                card,\n                                quantity: quantidade,\n                                condition: \"Near Mint\",\n                                foil: false\n                            }\n                        ];\n                    }\n                    return {\n                        ...c,\n                        cards: newCards,\n                        updatedAt: new Date().toISOString()\n                    };\n                }));\n        }\n    };\n    // Função para remover carta da coleção\n    const removerCarta = async (card)=>{\n        if (!currentCollectionId) return;\n        if (session) {\n            try {\n                // Encontrar o ID da carta na coleção\n                const collection = collections.find((c)=>c.id === currentCollectionId);\n                if (!collection) return;\n                const cardInCollection = collection.cards.find((cc)=>cc.card.id === card.id);\n                if (!cardInCollection) return;\n                if (cardInCollection.quantity > 1) {\n                    // Atualizar quantidade\n                    await _utils_apiService__WEBPACK_IMPORTED_MODULE_3__.collectionService.updateCard(currentCollectionId, cardInCollection._id, {\n                        quantity: cardInCollection.quantity - 1\n                    });\n                } else {\n                    // Remover carta\n                    await _utils_apiService__WEBPACK_IMPORTED_MODULE_3__.collectionService.removeCard(currentCollectionId, cardInCollection._id);\n                }\n                // Atualizar estado local\n                const response = await _utils_apiService__WEBPACK_IMPORTED_MODULE_3__.collectionService.getById(currentCollectionId);\n                if (response.success) {\n                    setCollections((prev)=>prev.map((c)=>c.id === currentCollectionId ? response.data : c));\n                }\n            } catch (error) {\n                console.error(\"Erro ao remover carta:\", error);\n                throw error;\n            }\n        } else {\n            // Fallback para localStorage\n            setCollections((prev)=>prev.map((c)=>{\n                    if (c.id !== currentCollectionId) return c;\n                    const existingCard = c.cards.find((cc)=>cc.card.id === card.id);\n                    let newCards;\n                    if (existingCard && existingCard.quantity > 1) {\n                        newCards = c.cards.map((cc)=>cc.card.id === card.id ? {\n                                ...cc,\n                                quantity: cc.quantity - 1\n                            } : cc);\n                    } else {\n                        newCards = c.cards.filter((cc)=>cc.card.id !== card.id);\n                    }\n                    return {\n                        ...c,\n                        cards: newCards,\n                        updatedAt: new Date().toISOString()\n                    };\n                }));\n        }\n    };\n    // Função para obter quantidade de uma carta na coleção\n    const getQuantidadeNaColecao = (cardId)=>{\n        var _currentCollection_cards;\n        const card = currentCollection === null || currentCollection === void 0 ? void 0 : (_currentCollection_cards = currentCollection.cards) === null || _currentCollection_cards === void 0 ? void 0 : _currentCollection_cards.find((c)=>c.card.id === cardId);\n        return card ? card.quantity : 0;\n    };\n    // ====== FUNÇÕES DE GERENCIAMENTO DE DECKS ======\n    // Criar novo deck\n    const criarDeck = async (deckData)=>{\n        if (session) {\n            try {\n                const response = await _utils_apiService__WEBPACK_IMPORTED_MODULE_3__.deckService.create(deckData);\n                if (response.success && response.data) {\n                    setDecks((prev)=>[\n                            ...prev,\n                            response.data\n                        ]);\n                    return response.data.id;\n                }\n                throw new Error(\"Erro ao criar deck\");\n            } catch (error) {\n                console.error(\"Erro ao criar deck:\", error);\n                throw error;\n            }\n        } else {\n            // Fallback para localStorage\n            const newDeck = {\n                ...deckData,\n                id: Date.now().toString(),\n                createdAt: new Date().toISOString(),\n                lastModified: new Date().toISOString()\n            };\n            setDecks((prev)=>[\n                    ...prev,\n                    newDeck\n                ]);\n            return newDeck.id;\n        }\n    };\n    // Editar deck existente\n    const editarDeck = async (deckId, updates)=>{\n        if (session) {\n            try {\n                const response = await _utils_apiService__WEBPACK_IMPORTED_MODULE_3__.deckService.update(deckId, updates);\n                if (response.success) {\n                    setDecks((prev)=>prev.map((deck)=>deck.id === deckId ? {\n                                ...deck,\n                                ...updates\n                            } : deck));\n                }\n            } catch (error) {\n                console.error(\"Erro ao editar deck:\", error);\n                throw error;\n            }\n        } else {\n            // Fallback para localStorage\n            setDecks((prev)=>prev.map((deck)=>deck.id === deckId ? {\n                        ...deck,\n                        ...updates,\n                        lastModified: new Date().toISOString()\n                    } : deck));\n        }\n    };\n    // Deletar deck\n    const deletarDeck = async (deckId)=>{\n        if (session) {\n            try {\n                const response = await _utils_apiService__WEBPACK_IMPORTED_MODULE_3__.deckService.delete(deckId);\n                if (response.success) {\n                    setDecks((prev)=>prev.filter((deck)=>deck.id !== deckId));\n                }\n            } catch (error) {\n                console.error(\"Erro ao deletar deck:\", error);\n                throw error;\n            }\n        } else {\n            // Fallback para localStorage\n            setDecks((prev)=>prev.filter((deck)=>deck.id !== deckId));\n        }\n    };\n    // Duplicar deck\n    const duplicarDeck = async (deckId, newName)=>{\n        const originalDeck = decks.find((deck)=>deck.id === deckId);\n        if (!originalDeck) return undefined;\n        if (session) {\n            try {\n                const newDeckData = {\n                    name: newName || \"\".concat(originalDeck.name, \" (C\\xf3pia)\"),\n                    description: originalDeck.description,\n                    format: originalDeck.format,\n                    colors: originalDeck.colors,\n                    isPublic: false\n                };\n                const response = await _utils_apiService__WEBPACK_IMPORTED_MODULE_3__.deckService.create(newDeckData);\n                if (response.success && response.data) {\n                    // Adicionar cartas ao novo deck\n                    for (const cardItem of originalDeck.cards){\n                        await _utils_apiService__WEBPACK_IMPORTED_MODULE_3__.deckService.addCard(response.data.id, {\n                            card: cardItem.card,\n                            quantity: cardItem.quantity,\n                            isSideboard: cardItem.category === \"sideboard\",\n                            isCommander: cardItem.category === \"commander\",\n                            category: cardItem.category\n                        });\n                    }\n                    // Atualizar estado local\n                    const updatedResponse = await _utils_apiService__WEBPACK_IMPORTED_MODULE_3__.deckService.getById(response.data.id);\n                    if (updatedResponse.success) {\n                        setDecks((prev)=>[\n                                ...prev,\n                                updatedResponse.data\n                            ]);\n                        return updatedResponse.data.id;\n                    }\n                }\n                return undefined;\n            } catch (error) {\n                console.error(\"Erro ao duplicar deck:\", error);\n                throw error;\n            }\n        } else {\n            // Fallback para localStorage\n            const duplicatedDeck = {\n                ...originalDeck,\n                id: Date.now().toString(),\n                name: newName || \"\".concat(originalDeck.name, \" (C\\xf3pia)\"),\n                createdAt: new Date().toISOString(),\n                lastModified: new Date().toISOString()\n            };\n            setDecks((prev)=>[\n                    ...prev,\n                    duplicatedDeck\n                ]);\n            return duplicatedDeck.id;\n        }\n    };\n    // Adicionar carta ao deck\n    const adicionarCartaAoDeck = async function(deckId, card) {\n        let category = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : \"mainboard\", quantity = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : 1;\n        if (session) {\n            try {\n                await _utils_apiService__WEBPACK_IMPORTED_MODULE_3__.deckService.addCard(deckId, {\n                    card,\n                    quantity,\n                    isSideboard: category === \"sideboard\",\n                    isCommander: category === \"commander\",\n                    category\n                });\n                // Atualizar estado local\n                const response = await _utils_apiService__WEBPACK_IMPORTED_MODULE_3__.deckService.getById(deckId);\n                if (response.success) {\n                    setDecks((prev)=>prev.map((deck)=>deck.id === deckId ? response.data : deck));\n                }\n            } catch (error) {\n                console.error(\"Erro ao adicionar carta ao deck:\", error);\n                throw error;\n            }\n        } else {\n            // Fallback para localStorage\n            setDecks((prev)=>prev.map((deck)=>{\n                    if (deck.id === deckId) {\n                        const existingCard = deck.cards.find((c)=>c.card.id === card.id && c.category === category);\n                        if (existingCard) {\n                            return {\n                                ...deck,\n                                cards: deck.cards.map((c)=>c.card.id === card.id && c.category === category ? {\n                                        ...c,\n                                        quantity: c.quantity + quantity\n                                    } : c),\n                                lastModified: new Date().toISOString()\n                            };\n                        } else {\n                            return {\n                                ...deck,\n                                cards: [\n                                    ...deck.cards,\n                                    {\n                                        card,\n                                        quantity,\n                                        category\n                                    }\n                                ],\n                                lastModified: new Date().toISOString()\n                            };\n                        }\n                    }\n                    return deck;\n                }));\n        }\n    };\n    // Remover carta do deck\n    const removerCartaDoDeck = async function(deckId, cardId) {\n        let category = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : \"mainboard\";\n        if (session) {\n            try {\n                // Encontrar o ID da carta no deck\n                const deck = decks.find((d)=>d.id === deckId);\n                if (!deck) return;\n                const cardInDeck = deck.cards.find((c)=>c.card.id === cardId && c.category === category);\n                if (!cardInDeck) return;\n                await _utils_apiService__WEBPACK_IMPORTED_MODULE_3__.deckService.removeCard(deckId, cardInDeck._id);\n                // Atualizar estado local\n                const response = await _utils_apiService__WEBPACK_IMPORTED_MODULE_3__.deckService.getById(deckId);\n                if (response.success) {\n                    setDecks((prev)=>prev.map((deck)=>deck.id === deckId ? response.data : deck));\n                }\n            } catch (error) {\n                console.error(\"Erro ao remover carta do deck:\", error);\n                throw error;\n            }\n        } else {\n            // Fallback para localStorage\n            setDecks((prev)=>prev.map((deck)=>{\n                    if (deck.id === deckId) {\n                        return {\n                            ...deck,\n                            cards: deck.cards.filter((c)=>!(c.card.id === cardId && c.category === category)),\n                            lastModified: new Date().toISOString()\n                        };\n                    }\n                    return deck;\n                }));\n        }\n    };\n    // Atualizar quantidade de carta no deck\n    const atualizarQuantidadeNoDeck = async function(deckId, cardId, novaQuantidade) {\n        let category = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : \"mainboard\";\n        if (novaQuantidade <= 0) {\n            await removerCartaDoDeck(deckId, cardId, category);\n            return;\n        }\n        if (session) {\n            try {\n                // Encontrar o ID da carta no deck\n                const deck = decks.find((d)=>d.id === deckId);\n                if (!deck) return;\n                const cardInDeck = deck.cards.find((c)=>c.card.id === cardId && c.category === category);\n                if (!cardInDeck) return;\n                await _utils_apiService__WEBPACK_IMPORTED_MODULE_3__.deckService.updateCard(deckId, cardInDeck._id, {\n                    quantity: novaQuantidade\n                });\n                // Atualizar estado local\n                const response = await _utils_apiService__WEBPACK_IMPORTED_MODULE_3__.deckService.getById(deckId);\n                if (response.success) {\n                    setDecks((prev)=>prev.map((deck)=>deck.id === deckId ? response.data : deck));\n                }\n            } catch (error) {\n                console.error(\"Erro ao atualizar quantidade no deck:\", error);\n                throw error;\n            }\n        } else {\n            // Fallback para localStorage\n            setDecks((prev)=>prev.map((deck)=>{\n                    if (deck.id === deckId) {\n                        return {\n                            ...deck,\n                            cards: deck.cards.map((c)=>c.card.id === cardId && c.category === category ? {\n                                    ...c,\n                                    quantity: novaQuantidade\n                                } : c),\n                            lastModified: new Date().toISOString()\n                        };\n                    }\n                    return deck;\n                }));\n        }\n    };\n    // Obter cartas que estão sendo usadas em decks\n    const getCartasUsadasEmDecks = (cardId)=>{\n        const result = [];\n        decks.forEach((deck)=>{\n            deck.cards.forEach((deckCard)=>{\n                if (deckCard.card.id === cardId) {\n                    result.push({\n                        deck,\n                        quantity: deckCard.quantity,\n                        category: deckCard.category\n                    });\n                }\n            });\n        });\n        return result;\n    };\n    // Função para importar deck a partir de uma lista de texto\n    const importarDeckDeLista = async (deckList, deckData)=>{\n        try {\n            // Criar o deck vazio primeiro\n            const deckId = await criarDeck({\n                name: deckData.name,\n                format: deckData.format,\n                description: deckData.description || \"\",\n                colors: deckData.colors || [],\n                cards: [],\n                isPublic: deckData.isPublic || false,\n                tags: deckData.tags || []\n            });\n            // Processar a lista de cartas\n            const lines = deckList.split(\"\\n\").filter((line)=>line.trim());\n            let currentSection = \"mainboard\";\n            const cardPromises = [];\n            for (const line of lines){\n                const trimmedLine = line.trim().toLowerCase();\n                // Verificar se é uma linha de seção\n                if (trimmedLine.includes(\"sideboard\")) {\n                    currentSection = \"sideboard\";\n                    continue;\n                }\n                if (trimmedLine.includes(\"commander\")) {\n                    currentSection = \"commander\";\n                    continue;\n                }\n                if (trimmedLine.includes(\"mainboard\") || trimmedLine.includes(\"main deck\")) {\n                    currentSection = \"mainboard\";\n                    continue;\n                }\n                // Verificar se é uma linha de carta\n                const match = line.match(/^(\\d+)x?\\s+(.+)$/);\n                if (match) {\n                    const quantity = parseInt(match[1]);\n                    const cardName = match[2].trim();\n                    // Buscar a carta na API do Scryfall\n                    cardPromises.push((async ()=>{\n                        try {\n                            const response = await fetch(\"https://api.scryfall.com/cards/named?fuzzy=\".concat(encodeURIComponent(cardName)));\n                            if (response.ok) {\n                                const cardData = await response.json();\n                                // Adicionar a carta ao deck\n                                await adicionarCartaAoDeck(deckId, cardData, currentSection, quantity);\n                                return {\n                                    success: true,\n                                    card: cardName\n                                };\n                            } else {\n                                console.error(\"Carta n\\xe3o encontrada: \".concat(cardName));\n                                return {\n                                    success: false,\n                                    card: cardName\n                                };\n                            }\n                        } catch (error) {\n                            console.error(\"Erro ao buscar carta \".concat(cardName, \":\"), error);\n                            return {\n                                success: false,\n                                card: cardName\n                            };\n                        }\n                    })());\n                }\n            }\n            // Aguardar todas as cartas serem processadas\n            const results = await Promise.allSettled(cardPromises);\n            const failedCards = results.filter((result)=>result.status === \"fulfilled\" && !result.value.success).map((result)=>result.status === \"fulfilled\" ? result.value.card : \"Unknown\");\n            if (failedCards.length > 0) {\n                console.warn(\"Algumas cartas n\\xe3o foram encontradas: \".concat(failedCards.join(\", \")));\n            }\n            return deckId;\n        } catch (error) {\n            console.error(\"Erro ao importar deck:\", error);\n            throw new Error(\"Falha ao importar deck. Verifique o formato da lista.\");\n        }\n    };\n    // ====== FUNÇÕES DE GERENCIAMENTO DE FAVORITOS ======\n    // Adicionar carta aos favoritos\n    const addFavorite = async (card)=>{\n        if (session) {\n            try {\n                const response = await _utils_apiService__WEBPACK_IMPORTED_MODULE_3__.favoriteService.add(card);\n                if (response.success) {\n                    setFavorites((prev)=>[\n                            ...prev,\n                            card\n                        ]);\n                }\n            } catch (error) {\n                console.error(\"Erro ao adicionar favorito:\", error);\n                throw error;\n            }\n        } else {\n            // Fallback para localStorage\n            setFavorites((prev)=>{\n                if (prev.some((c)=>c.id === card.id)) return prev;\n                return [\n                    ...prev,\n                    card\n                ];\n            });\n        }\n    };\n    // Remover carta dos favoritos\n    const removeFavorite = async (cardId)=>{\n        if (session) {\n            try {\n                const response = await _utils_apiService__WEBPACK_IMPORTED_MODULE_3__.favoriteService.removeCard(cardId);\n                if (response.success) {\n                    setFavorites((prev)=>prev.filter((card)=>card.id !== cardId));\n                }\n            } catch (error) {\n                console.error(\"Erro ao remover favorito:\", error);\n                throw error;\n            }\n        } else {\n            // Fallback para localStorage\n            setFavorites((prev)=>prev.filter((card)=>card.id !== cardId));\n        }\n    };\n    // Verificar se uma carta está nos favoritos\n    const isFavorite = (cardId)=>{\n        return favorites.some((card)=>card.id === cardId);\n    };\n    // Função para exportar coleção para CSV no formato Manabox\n    const exportCollectionToCSV = (collection)=>{\n        // Formato Manabox: Name,Set,Quantity,Foil,Condition,Language\n        const csvContent = [\n            [\n                \"Name\",\n                \"Set\",\n                \"Quantity\",\n                \"Foil\",\n                \"Condition\",\n                \"Language\"\n            ],\n            ...collection.cards.map((c)=>[\n                    c.card.name,\n                    c.card.set_code,\n                    c.quantity.toString(),\n                    c.foil ? \"Foil\" : \"Non-foil\",\n                    c.condition || \"Near Mint\",\n                    c.language || \"English\"\n                ])\n        ].map((row)=>row.join(\",\")).join(\"\\n\");\n        const blob = new Blob([\n            csvContent\n        ], {\n            type: \"text/csv\"\n        });\n        const url = window.URL.createObjectURL(blob);\n        const a = document.createElement(\"a\");\n        a.href = url;\n        a.download = \"\".concat(collection.name, \"_manabox.csv\");\n        a.click();\n        window.URL.revokeObjectURL(url);\n    };\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(AppContext.Provider, {\n        value: {\n            collections,\n            currentCollection,\n            setCurrentCollection: setCollections,\n            currentCollectionId,\n            setCurrentCollectionId,\n            createCollection,\n            updateCollection,\n            deleteCollection,\n            duplicateCollection,\n            adicionarCarta,\n            removerCarta,\n            getQuantidadeNaColecao,\n            decks,\n            setDecks,\n            criarDeck,\n            editarDeck,\n            deletarDeck,\n            duplicarDeck,\n            adicionarCartaAoDeck,\n            removerCartaDoDeck,\n            atualizarQuantidadeNoDeck,\n            getCartasUsadasEmDecks,\n            importarDeckDeLista,\n            favorites,\n            addFavorite,\n            removeFavorite,\n            isFavorite,\n            loading,\n            exportCollectionToCSV\n        },\n        children: children\n    }, void 0, false, {\n        fileName: \"C:\\\\Users\\\\Rodrigo\\\\Downloads\\\\MTG HELP\\\\contexts\\\\AppContext.tsx\",\n        lineNumber: 857,\n        columnNumber: 5\n    }, undefined);\n};\n_s1(AppProvider, \"P5slHoOyqMDp2BOUreOP8tfxRtM=\", false, function() {\n    return [\n        next_auth_react__WEBPACK_IMPORTED_MODULE_4__.useSession\n    ];\n});\n_c = AppProvider;\nvar _c;\n$RefreshReg$(_c, \"AppProvider\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./contexts/AppContext.tsx\n"));

/***/ }),

/***/ "(app-pages-browser)/./utils/storageUtils.ts":
/*!*******************************!*\
  !*** ./utils/storageUtils.ts ***!
  \*******************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   safeLocalStorageSave: function() { return /* binding */ safeLocalStorageSave; },\n/* harmony export */   truncateCardData: function() { return /* binding */ truncateCardData; }\n/* harmony export */ });\n/**\n * Função para truncar dados de cartas para economizar espaço no localStorage\n * Remove informações não essenciais das cartas\n */ const truncateCardData = (card)=>{\n    return {\n        id: card.id,\n        name: card.name,\n        set: card.set,\n        set_code: card.set_code,\n        type_line: card.type_line,\n        cmc: card.cmc,\n        colors: card.colors,\n        rarity: card.rarity\n    };\n};\n/**\n * Função segura para salvar no localStorage com tratamento de quota excedida\n */ const safeLocalStorageSave = (key, data)=>{\n    try {\n        const serialized = JSON.stringify(data);\n        localStorage.setItem(key, serialized);\n        return true;\n    } catch (error) {\n        console.error(\"Erro ao salvar \".concat(key, \" no localStorage:\"), error);\n        // Se for erro de quota, tente limpar dados não essenciais\n        if (error instanceof DOMException && (error.name === \"QuotaExceededError\" || error.name === \"NS_ERROR_DOM_QUOTA_REACHED\")) {\n            console.warn(\"Quota excedida. Tentando salvar vers\\xe3o reduzida...\");\n            try {\n                // Para coleções, remova detalhes das cartas mantendo apenas IDs e quantidades\n                if (key === \"mtg-collections\") {\n                    const simplifiedCollections = data.map((collection)=>({\n                            ...collection,\n                            cards: collection.cards.map((card)=>({\n                                    quantity: card.quantity,\n                                    card: truncateCardData(card.card),\n                                    condition: card.condition,\n                                    foil: card.foil,\n                                    language: card.language\n                                }))\n                        }));\n                    localStorage.setItem(key, JSON.stringify(simplifiedCollections));\n                    return true;\n                }\n                // Para decks, também simplifique os dados das cartas\n                if (key === \"mtg-decks\") {\n                    const simplifiedDecks = data.map((deck)=>({\n                            ...deck,\n                            cards: deck.cards.map((card)=>({\n                                    quantity: card.quantity,\n                                    category: card.category,\n                                    card: truncateCardData(card.card)\n                                }))\n                        }));\n                    localStorage.setItem(key, JSON.stringify(simplifiedDecks));\n                    return true;\n                }\n                // Para favoritos, simplifique os dados das cartas\n                if (key === \"mtg-favorites\") {\n                    const simplifiedFavorites = data.map((card)=>truncateCardData(card));\n                    localStorage.setItem(key, JSON.stringify(simplifiedFavorites));\n                    return true;\n                }\n            } catch (innerError) {\n                console.error(\"Falha ao salvar vers\\xe3o reduzida:\", innerError);\n            }\n        }\n        return false;\n    }\n};\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL3V0aWxzL3N0b3JhZ2VVdGlscy50cyIsIm1hcHBpbmdzIjoiOzs7OztBQUVBOzs7Q0FHQyxHQUNNLE1BQU1BLG1CQUFtQixDQUFDQztJQUMvQixPQUFPO1FBQ0xDLElBQUlELEtBQUtDLEVBQUU7UUFDWEMsTUFBTUYsS0FBS0UsSUFBSTtRQUNmQyxLQUFLSCxLQUFLRyxHQUFHO1FBQ2JDLFVBQVVKLEtBQUtJLFFBQVE7UUFDdkJDLFdBQVdMLEtBQUtLLFNBQVM7UUFDekJDLEtBQUtOLEtBQUtNLEdBQUc7UUFDYkMsUUFBUVAsS0FBS08sTUFBTTtRQUNuQkMsUUFBUVIsS0FBS1EsTUFBTTtJQUNyQjtBQUNGLEVBQUU7QUFFRjs7Q0FFQyxHQUNNLE1BQU1DLHVCQUF1QixDQUFDQyxLQUFhQztJQUNoRCxJQUFJO1FBQ0YsTUFBTUMsYUFBYUMsS0FBS0MsU0FBUyxDQUFDSDtRQUNsQ0ksYUFBYUMsT0FBTyxDQUFDTixLQUFLRTtRQUMxQixPQUFPO0lBQ1QsRUFBRSxPQUFPSyxPQUFPO1FBQ2RDLFFBQVFELEtBQUssQ0FBQyxrQkFBc0IsT0FBSlAsS0FBSSxzQkFBb0JPO1FBRXhELDBEQUEwRDtRQUMxRCxJQUFJQSxpQkFBaUJFLGdCQUNoQkYsQ0FBQUEsTUFBTWYsSUFBSSxLQUFLLHdCQUF3QmUsTUFBTWYsSUFBSSxLQUFLLDRCQUEyQixHQUFJO1lBQ3hGZ0IsUUFBUUUsSUFBSSxDQUFDO1lBRWIsSUFBSTtnQkFDRiw4RUFBOEU7Z0JBQzlFLElBQUlWLFFBQVEsbUJBQW1CO29CQUM3QixNQUFNVyx3QkFBd0JWLEtBQUtXLEdBQUcsQ0FBQyxDQUFDQyxhQUFnQzs0QkFDdEUsR0FBR0EsVUFBVTs0QkFDYkMsT0FBT0QsV0FBV0MsS0FBSyxDQUFDRixHQUFHLENBQUN0QixDQUFBQSxPQUFTO29DQUNuQ3lCLFVBQVV6QixLQUFLeUIsUUFBUTtvQ0FDdkJ6QixNQUFNRCxpQkFBaUJDLEtBQUtBLElBQUk7b0NBQ2hDMEIsV0FBVzFCLEtBQUswQixTQUFTO29DQUN6QkMsTUFBTTNCLEtBQUsyQixJQUFJO29DQUNmQyxVQUFVNUIsS0FBSzRCLFFBQVE7Z0NBQ3pCO3dCQUNGO29CQUNBYixhQUFhQyxPQUFPLENBQUNOLEtBQUtHLEtBQUtDLFNBQVMsQ0FBQ087b0JBQ3pDLE9BQU87Z0JBQ1Q7Z0JBRUEscURBQXFEO2dCQUNyRCxJQUFJWCxRQUFRLGFBQWE7b0JBQ3ZCLE1BQU1tQixrQkFBa0JsQixLQUFLVyxHQUFHLENBQUMsQ0FBQ1EsT0FBZ0I7NEJBQ2hELEdBQUdBLElBQUk7NEJBQ1BOLE9BQU9NLEtBQUtOLEtBQUssQ0FBQ0YsR0FBRyxDQUFDdEIsQ0FBQUEsT0FBUztvQ0FDN0J5QixVQUFVekIsS0FBS3lCLFFBQVE7b0NBQ3ZCTSxVQUFVL0IsS0FBSytCLFFBQVE7b0NBQ3ZCL0IsTUFBTUQsaUJBQWlCQyxLQUFLQSxJQUFJO2dDQUNsQzt3QkFDRjtvQkFDQWUsYUFBYUMsT0FBTyxDQUFDTixLQUFLRyxLQUFLQyxTQUFTLENBQUNlO29CQUN6QyxPQUFPO2dCQUNUO2dCQUVBLGtEQUFrRDtnQkFDbEQsSUFBSW5CLFFBQVEsaUJBQWlCO29CQUMzQixNQUFNc0Isc0JBQXNCckIsS0FBS1csR0FBRyxDQUFDLENBQUN0QixPQUFrQkQsaUJBQWlCQztvQkFDekVlLGFBQWFDLE9BQU8sQ0FBQ04sS0FBS0csS0FBS0MsU0FBUyxDQUFDa0I7b0JBQ3pDLE9BQU87Z0JBQ1Q7WUFDRixFQUFFLE9BQU9DLFlBQVk7Z0JBQ25CZixRQUFRRCxLQUFLLENBQUMsdUNBQW9DZ0I7WUFDcEQ7UUFDRjtRQUNBLE9BQU87SUFDVDtBQUNGLEVBQUUiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vdXRpbHMvc3RvcmFnZVV0aWxzLnRzPzk3YmYiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHR5cGUgeyBNVEdDYXJkLCBVc2VyQ29sbGVjdGlvbiwgQ29sbGVjdGlvbkNhcmQsIERlY2sgfSBmcm9tICdAL3R5cGVzL210Zyc7XG5cbi8qKlxuICogRnVuw6fDo28gcGFyYSB0cnVuY2FyIGRhZG9zIGRlIGNhcnRhcyBwYXJhIGVjb25vbWl6YXIgZXNwYcOnbyBubyBsb2NhbFN0b3JhZ2VcbiAqIFJlbW92ZSBpbmZvcm1hw6fDtWVzIG7Do28gZXNzZW5jaWFpcyBkYXMgY2FydGFzXG4gKi9cbmV4cG9ydCBjb25zdCB0cnVuY2F0ZUNhcmREYXRhID0gKGNhcmQ6IE1UR0NhcmQpOiBQYXJ0aWFsPE1UR0NhcmQ+ID0+IHtcbiAgcmV0dXJuIHtcbiAgICBpZDogY2FyZC5pZCxcbiAgICBuYW1lOiBjYXJkLm5hbWUsXG4gICAgc2V0OiBjYXJkLnNldCxcbiAgICBzZXRfY29kZTogY2FyZC5zZXRfY29kZSxcbiAgICB0eXBlX2xpbmU6IGNhcmQudHlwZV9saW5lLFxuICAgIGNtYzogY2FyZC5jbWMsXG4gICAgY29sb3JzOiBjYXJkLmNvbG9ycyxcbiAgICByYXJpdHk6IGNhcmQucmFyaXR5XG4gIH07XG59O1xuXG4vKipcbiAqIEZ1bsOnw6NvIHNlZ3VyYSBwYXJhIHNhbHZhciBubyBsb2NhbFN0b3JhZ2UgY29tIHRyYXRhbWVudG8gZGUgcXVvdGEgZXhjZWRpZGFcbiAqL1xuZXhwb3J0IGNvbnN0IHNhZmVMb2NhbFN0b3JhZ2VTYXZlID0gKGtleTogc3RyaW5nLCBkYXRhOiBhbnkpOiBib29sZWFuID0+IHtcbiAgdHJ5IHtcbiAgICBjb25zdCBzZXJpYWxpemVkID0gSlNPTi5zdHJpbmdpZnkoZGF0YSk7XG4gICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oa2V5LCBzZXJpYWxpemVkKTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBjb25zb2xlLmVycm9yKGBFcnJvIGFvIHNhbHZhciAke2tleX0gbm8gbG9jYWxTdG9yYWdlOmAsIGVycm9yKTtcbiAgICBcbiAgICAvLyBTZSBmb3IgZXJybyBkZSBxdW90YSwgdGVudGUgbGltcGFyIGRhZG9zIG7Do28gZXNzZW5jaWFpc1xuICAgIGlmIChlcnJvciBpbnN0YW5jZW9mIERPTUV4Y2VwdGlvbiAmJiBcbiAgICAgICAgKGVycm9yLm5hbWUgPT09ICdRdW90YUV4Y2VlZGVkRXJyb3InIHx8IGVycm9yLm5hbWUgPT09ICdOU19FUlJPUl9ET01fUVVPVEFfUkVBQ0hFRCcpKSB7XG4gICAgICBjb25zb2xlLndhcm4oJ1F1b3RhIGV4Y2VkaWRhLiBUZW50YW5kbyBzYWx2YXIgdmVyc8OjbyByZWR1emlkYS4uLicpO1xuICAgICAgXG4gICAgICB0cnkge1xuICAgICAgICAvLyBQYXJhIGNvbGXDp8O1ZXMsIHJlbW92YSBkZXRhbGhlcyBkYXMgY2FydGFzIG1hbnRlbmRvIGFwZW5hcyBJRHMgZSBxdWFudGlkYWRlc1xuICAgICAgICBpZiAoa2V5ID09PSAnbXRnLWNvbGxlY3Rpb25zJykge1xuICAgICAgICAgIGNvbnN0IHNpbXBsaWZpZWRDb2xsZWN0aW9ucyA9IGRhdGEubWFwKChjb2xsZWN0aW9uOiBVc2VyQ29sbGVjdGlvbikgPT4gKHtcbiAgICAgICAgICAgIC4uLmNvbGxlY3Rpb24sXG4gICAgICAgICAgICBjYXJkczogY29sbGVjdGlvbi5jYXJkcy5tYXAoY2FyZCA9PiAoe1xuICAgICAgICAgICAgICBxdWFudGl0eTogY2FyZC5xdWFudGl0eSxcbiAgICAgICAgICAgICAgY2FyZDogdHJ1bmNhdGVDYXJkRGF0YShjYXJkLmNhcmQpLFxuICAgICAgICAgICAgICBjb25kaXRpb246IGNhcmQuY29uZGl0aW9uLFxuICAgICAgICAgICAgICBmb2lsOiBjYXJkLmZvaWwsXG4gICAgICAgICAgICAgIGxhbmd1YWdlOiBjYXJkLmxhbmd1YWdlXG4gICAgICAgICAgICB9KSlcbiAgICAgICAgICB9KSk7XG4gICAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oa2V5LCBKU09OLnN0cmluZ2lmeShzaW1wbGlmaWVkQ29sbGVjdGlvbnMpKTtcbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgLy8gUGFyYSBkZWNrcywgdGFtYsOpbSBzaW1wbGlmaXF1ZSBvcyBkYWRvcyBkYXMgY2FydGFzXG4gICAgICAgIGlmIChrZXkgPT09ICdtdGctZGVja3MnKSB7XG4gICAgICAgICAgY29uc3Qgc2ltcGxpZmllZERlY2tzID0gZGF0YS5tYXAoKGRlY2s6IERlY2spID0+ICh7XG4gICAgICAgICAgICAuLi5kZWNrLFxuICAgICAgICAgICAgY2FyZHM6IGRlY2suY2FyZHMubWFwKGNhcmQgPT4gKHtcbiAgICAgICAgICAgICAgcXVhbnRpdHk6IGNhcmQucXVhbnRpdHksXG4gICAgICAgICAgICAgIGNhdGVnb3J5OiBjYXJkLmNhdGVnb3J5LFxuICAgICAgICAgICAgICBjYXJkOiB0cnVuY2F0ZUNhcmREYXRhKGNhcmQuY2FyZClcbiAgICAgICAgICAgIH0pKVxuICAgICAgICAgIH0pKTtcbiAgICAgICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbShrZXksIEpTT04uc3RyaW5naWZ5KHNpbXBsaWZpZWREZWNrcykpO1xuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICAvLyBQYXJhIGZhdm9yaXRvcywgc2ltcGxpZmlxdWUgb3MgZGFkb3MgZGFzIGNhcnRhc1xuICAgICAgICBpZiAoa2V5ID09PSAnbXRnLWZhdm9yaXRlcycpIHtcbiAgICAgICAgICBjb25zdCBzaW1wbGlmaWVkRmF2b3JpdGVzID0gZGF0YS5tYXAoKGNhcmQ6IE1UR0NhcmQpID0+IHRydW5jYXRlQ2FyZERhdGEoY2FyZCkpO1xuICAgICAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKGtleSwgSlNPTi5zdHJpbmdpZnkoc2ltcGxpZmllZEZhdm9yaXRlcykpO1xuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICB9IGNhdGNoIChpbm5lckVycm9yKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ0ZhbGhhIGFvIHNhbHZhciB2ZXJzw6NvIHJlZHV6aWRhOicsIGlubmVyRXJyb3IpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn07Il0sIm5hbWVzIjpbInRydW5jYXRlQ2FyZERhdGEiLCJjYXJkIiwiaWQiLCJuYW1lIiwic2V0Iiwic2V0X2NvZGUiLCJ0eXBlX2xpbmUiLCJjbWMiLCJjb2xvcnMiLCJyYXJpdHkiLCJzYWZlTG9jYWxTdG9yYWdlU2F2ZSIsImtleSIsImRhdGEiLCJzZXJpYWxpemVkIiwiSlNPTiIsInN0cmluZ2lmeSIsImxvY2FsU3RvcmFnZSIsInNldEl0ZW0iLCJlcnJvciIsImNvbnNvbGUiLCJET01FeGNlcHRpb24iLCJ3YXJuIiwic2ltcGxpZmllZENvbGxlY3Rpb25zIiwibWFwIiwiY29sbGVjdGlvbiIsImNhcmRzIiwicXVhbnRpdHkiLCJjb25kaXRpb24iLCJmb2lsIiwibGFuZ3VhZ2UiLCJzaW1wbGlmaWVkRGVja3MiLCJkZWNrIiwiY2F0ZWdvcnkiLCJzaW1wbGlmaWVkRmF2b3JpdGVzIiwiaW5uZXJFcnJvciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./utils/storageUtils.ts\n"));

/***/ })

});