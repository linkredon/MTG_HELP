import NextAuth from 'next-auth';
import GoogleProvider from 'next-auth/providers/google';
import CredentialsProvider from 'next-auth/providers/credentials';
import { authService } from '@/utils/apiService';

const handler = NextAuth({
  providers: [
    GoogleProvider({
      clientId: process.env.GOOGLE_CLIENT_ID || '',
      clientSecret: process.env.GOOGLE_CLIENT_SECRET || '',
    }),
    CredentialsProvider({
      name: 'Credentials',
      credentials: {
        email: { label: "Email", type: "email" },
        password: { label: "Senha", type: "password" }
      },
      async authorize(credentials) {
        if (!credentials?.email || !credentials?.password) {
          return null;
        }
        try {
          const response = await authService.login({
            email: credentials.email,
            password: credentials.password
          });
          if (response.success && response.data) {
            return {
              id: response.data.user.id,
              name: response.data.user.name,
              email: response.data.user.email,
              avatar: response.data.user.avatar,
              role: response.data.user.role,
              token: response.data.token
            };
          }
          return null;
        } catch (error) {
          console.error('Erro na autenticação:', error);
          return null;
        }
      }
    })
  ],
  secret: process.env.NEXTAUTH_SECRET,
  session: {
    strategy: 'jwt',
    maxAge: 30 * 24 * 60 * 60, // 30 dias
  },
  callbacks: {
    async jwt({ token, user }) {
      if (user) {
        token.id = user.id || user.sub || null;
        token.name = user.name || null;
        token.email = user.email || null;
        token.avatar = user.avatar || user.image || null;
        token.role = user.role || null;
        token.token = user.token || null;
      }
      return token;
    },
    async session({ session, token }) {
      if (session.user) {
        session.user.id = token.id || null;
        session.user.name = token.name || null;
        session.user.email = token.email || null;
        session.user.avatar = token.avatar || null;
        session.user.role = token.role || null;
        session.user.token = token.token || null;
      }
      return session;
    }
  },
  pages: {
    signIn: '/login',
    error: '/login',
  },
  debug: process.env.NODE_ENV === 'development',
});

export { handler as GET, handler as POST };